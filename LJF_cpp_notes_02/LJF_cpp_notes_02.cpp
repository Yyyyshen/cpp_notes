// LJF_cpp_notes_02.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>

//
//生命周期和编程范式
//

//
//用瀑布模型类比C++程序生命周期
// 编码、预处理、编译、运行
// 
//编码阶段是 C++ 程序生命周期的起点，也是最重要的阶段，是后续阶段的基础，直接决定了 C++ 程序的“生存质量”。
//最基本的要求是遵循语言规范和设计文档，还有代码规范、注释规范、设计模式、编程惯用法，等等。
// 
//预处理是 C/C++ 程序独有的阶段，在这个阶段，发挥作用的是预处理器（Pre - processor）。
//“预处理”的目的是文字替换，用到的就是我们熟悉的各种预处理指令，比如#include、#define、#if 等，实现“预处理编程”。
// 
//编译运行就是将代码经过编译、链接、优化生成可执行文件，并载入内存，CPU逐条语句执行
//后续就是调试、日志跟踪、性能分析等，调整设计思路，重回第一阶段
// 
//应尽量在前三阶段消灭BUG
//

//
//编程范式是一种方法论
// 以 面向过程和面向对象 为基础
// C++支持五种范式，后三种是 泛型、模板元、函数式
// 
//从简洁和可维护角度，常用范式为 过程+对象+泛型 ，少量函数式，慎用模板元（一般是开发面向程序员的Lib才需要深入理解）
//
//

//
//code style
// 
//https://openresty.org/cn/c-coding-style-guide.html
//https://google.github.io/styleguide/cppguide.html
//

//
//较重要的点
//
//留白的艺术
// 在变量和操作符间加空格，在代码块间加空行
// 
//命名风格（这里感觉自己和作者是一样的想法，还不错
// 前缀用 m_表示成员变量 g_表示全局变量
// 变量、函数、空间用全小写+下划线
// 类名用驼峰发
// 宏和常量全大写+下划线
// 后缀用 _t表示type _s表示结构体 _e表示枚举
// 
//写好注释
// 文件头 版权声明、文件名、更新历史、功能描述、todo等
// 函数头 功能说明、注意事项、参数、返回值等
// 
//code review 利于改善风格
// 
//检查工具
// cpplint
//

int main()
{
    std::cout << "Hello World!\n";
}
